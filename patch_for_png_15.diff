diff --git a/examples/pngtest.cc b/examples/pngtest.cc
--- a/examples/pngtest.cc
+++ b/examples/pngtest.cc
@@ -45,7 +45,7 @@
 
 #include <pngwriter.h>
 #include <math.h>
-#include <iostream.h>
+#include <iostream>
 #include <string>
 using namespace std;
 #include <time.h>
diff --git a/examples/pngtest.espaniol.cc b/examples/pngtest.espaniol.cc
--- a/examples/pngtest.espaniol.cc
+++ b/examples/pngtest.espaniol.cc
@@ -44,7 +44,7 @@
   
 #include "../src/pngwriter.h"
 #include <math.h>
-#include <iostream.h>
+#include <iostream>
 #include <string>
 using namespace std;
 #include <time.h>
diff --git a/src/pngwriter.cc b/src/pngwriter.cc
--- a/src/pngwriter.cc
+++ b/src/pngwriter.cc
@@ -637,7 +637,7 @@ void pngwriter::plot(int x, int y, int red, int green, int blue)
 	blue = 0;
      }
 
-   if((bit_depth_ == 16))
+   if(bit_depth_ == 16)
      {
 	//	if( (height_-y >-1) && (height_-y <height_) && (6*(x-1) >-1) && (6*(x-1)+5<6*width_) )
 	if( (y<=height_) && (y>0) && (x>0) && (x<=width_) )
@@ -660,7 +660,7 @@ void pngwriter::plot(int x, int y, int red, int green, int blue)
 	 */
      }
 
-   if((bit_depth_ == 8))
+   if(bit_depth_ == 8)
      {
 	//	 if( (height_-y >-1) && (height_-y <height_) && (3*(x-1) >-1) && (3*(x-1)+5<3*width_) )
 	if( (y<height_+1) && (y>0) && (x>0) && (x<width_+1) )
@@ -883,7 +883,7 @@ void pngwriter::pngwriter_rename(long unsigned int index)
 
    //   %[flags][width][.precision][modifiers]type
    //
-   if((index > 999999999)||(index < 0))
+   if(index > 999999999)
      {
 	std::cerr << " PNGwriter::pngwriter_rename - ERROR **: Numerical name is out of 0 - 999 999 999 range (" << index <<")." << std::endl;
 	return;
@@ -988,19 +988,19 @@ void pngwriter::close()
    time(&gmt);
    png_convert_from_time_t(&mod_time, gmt);
    png_set_tIME(png_ptr, info_ptr, &mod_time);
-   text_ptr[0].key = "Title";
+   text_ptr[0].key = (char*)"Title";
    text_ptr[0].text = texttitle_;
    text_ptr[0].compression = PNG_TEXT_COMPRESSION_NONE;
-   text_ptr[1].key = "Author";
+   text_ptr[1].key = (char*)"Author";
    text_ptr[1].text = textauthor_;
    text_ptr[1].compression = PNG_TEXT_COMPRESSION_NONE;
-   text_ptr[2].key = "Description";
+   text_ptr[2].key = (char*)"Description";
    text_ptr[2].text = textdescription_;
    text_ptr[2].compression = PNG_TEXT_COMPRESSION_NONE;
-   text_ptr[3].key = "Creation Time";
-   text_ptr[3].text = png_convert_to_rfc1123(png_ptr, &mod_time);
+   text_ptr[3].key = (char*)"Creation Time";
+   text_ptr[3].text = (char*)png_convert_to_rfc1123(png_ptr, &mod_time);
    text_ptr[3].compression = PNG_TEXT_COMPRESSION_NONE;
-   text_ptr[4].key = "Software";
+   text_ptr[4].key = (char*)"Software";
    text_ptr[4].text = textsoftware_;
    text_ptr[4].compression = PNG_TEXT_COMPRESSION_NONE;
    png_set_text(png_ptr, info_ptr, text_ptr, 5);
@@ -1205,7 +1205,7 @@ void pngwriter::readfromfile(char * name)
    png_structp     png_ptr;
    png_infop       info_ptr;
    unsigned char   **image;
-   unsigned long   width, height;
+   png_uint_32     width, height;
    int bit_depth, color_type, interlace_type;
    //   png_uint_32     i;
    //
@@ -1311,7 +1311,7 @@ void pngwriter::readfromfile(char * name)
    if(color_type == PNG_COLOR_TYPE_GRAY && bit_depth<8) 
      { 
 	// png_set_expand(png_ptr); 
-	png_set_gray_1_2_4_to_8(png_ptr);  // Just an alias of the above.
+	png_set_expand_gray_1_2_4_to_8(png_ptr);  // Just an alias of the above.
 	transformation_ = 1; 
      } 
    
@@ -1342,12 +1342,12 @@ void pngwriter::readfromfile(char * name)
 	png_read_update_info(png_ptr, info_ptr); 
 	
 	// Just in case any of these have changed?
-	png_get_IHDR(png_ptr, info_ptr, &width, &height, &bit_depth, &color_type, &interlace_type, NULL, NULL); 
+	png_get_IHDR(png_ptr, info_ptr, (png_uint_32*)&width, (png_uint_32*)&height, &bit_depth, &color_type, &interlace_type, NULL, NULL);
 	bit_depth_ = bit_depth; 
 	colortype_ = color_type; 
      } 
    
-   if(!read_png_image(fp, png_ptr, info_ptr, &image, &width, &height)) 
+   if(!read_png_image((FILE*)fp, (png_struct*)png_ptr, (png_info*)info_ptr, (png_byte***)&image, (png_uint_32*)&width, (png_uint_32*)&height))
      { 
 	std::cerr << " PNGwriter::readfromfile - ERROR **: Error opening file " << name << ". read_png_image() failed." << std::endl; 
 	// fp has been closed already if read_png_image() fails. 
@@ -1530,7 +1530,7 @@ int pngwriter::read_png_info(FILE *fp, png_structp *png_ptr, png_infop *info_ptr
 	fclose(fp);
 	return 0;
      }
-   if (setjmp((*png_ptr)->jmpbuf)) /*(setjmp(png_jmpbuf(*png_ptr)) )*//////////////////////////////////////
+   if (setjmp(png_jmpbuf(*png_ptr))) /////////////////////////////////////
      {
 	png_destroy_read_struct(png_ptr, info_ptr, (png_infopp)NULL);
 	std::cerr << " PNGwriter::read_png_info - ERROR **: This file may be a corrupted PNG file. (setjmp(*png_ptr)->jmpbf) failed)." << std::endl;
